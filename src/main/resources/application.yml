server:
  port: 9990
  shutdown: graceful

#debug: true

logging:
  level:
    root: INFO
    org:
      springframework:
        security: INFO
#        web: TRACE
      mongodb:
        driver: WARN
      postgresql:
        Driver: WARN
        jdbc: WARN
      apache:
        catalina: WARN
    com:
      zaxxer:
        hikari: INFO

app:
  cors:
    allowed-origins:
  config:
    integrationsvc: ""
    projectmgmtsvc: ""
    paymentsvc: ""
    raskengine: ""
    pythonexecutorsvc: ""

spring:
#  kafka:
#    producer:
#      event-topic: event-data
#      bootstrap-servers: b-2.kafkadev.kb60te.c2.kafka.ap-south-1.amazonaws.com:9092
#  redis:
#    host: ${REDIS_HOST}
#    port: 6379
#    password: ${REDIS_PASSWORD}
  profiles:
    active: ${SPRING_PROFILE_ACTIVE}
#  servlet:
#    multipart:
#      max-file-size: 5MB
#      max-request-size: 5MB
#  security:
#    user:
#      name: local
#      password: local
#    oauth2:
#      client:
#        registration:
#          google:
#            client-id: ${GOOGLE_CLIENT_ID}
#            client-secret: ${GOOGLE_CLIENT_SECRET}
#            scope: openid,profile,email
#            authorization-grant-type: authorization_code
#            redirect-uri: "http://localhost:3000"
#      resourceserver:
#        jwt:
#          issuer-uri: accounts.google.com
#          jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
#      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#  data:
#    mongodb:
#      host: ${MONGODB_HOST}
#      port: 27017
#      username: ${MONGODB_USERNAME}
#      password: ${MONGODB_PASSWORD}
#      database: ${MONGODB_DATABASE}
  #      authentication-database: admin

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${PG_HOST}:5432/testdb
    username: ${PG_USERNAME}
    password: ${PG_PASSWORD}


#management:
#  endpoints:
#    enabled-by-default: false
#    web:
#      exposure:
#        include: "*"
#  endpoint:
#    health:
#      enabled: true
#      probes:
#        enabled: true
#    metrics:
#      enabled: true
#    prometheus:
#      enabled: true
#  metrics:
#    export:
#      prometheus:
#        enabled: true
#  server:
#    port: 8010
#
#mongo:
#  host: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_HOST}:27017/${MONGODB_DATABASE}
#  database: ${MONGODB_DATABASE}

#mq:
#  kyc-recon:
#    aws:
#      type: "STANDARD"
#      region: ${AWS_SQS_REGION}
#      connection: ${KYC_RECON_MQ_CONNECTION}
#      visibility-timeout-in-seconds: 30
#      poll-timeout-in-seconds: 0
#      delivery-delay-in-seconds: 0
#  assessment-result-recon:
#    aws:
#      type: "STANDARD"
#      region: ${AWS_SQS_REGION}
#      connection: ${ASSESSMENT_RESULT_RECON_MQ_CONNECTION}
#      visibility-timeout-in-seconds: 30
#      poll-timeout-in-seconds: 0
#      delivery-delay-in-seconds: 0
#  brevo-event:
#    aws:
#      type: "STANDARD"
#      region: ${BREVO_EVENT_MQ_REGION}
#      connection: ${BREVO_EVENT_MQ_CONNECTION}
#      visibility-timeout-in-seconds: 30
#      poll-timeout-in-seconds: 0
#      delivery-delay-in-seconds: 0
#
#admin:
#  user_name_1: ${USER_NAME_1}
#  password_1: ${USER_PASSWORD_1}
#  user_name_2: ${USER_NAME_2}
#  password_2: ${USER_PASSWORD_2}
#  user_name_3: ${USER_NAME_3}
#  password_3: ${USER_PASSWORD_3}